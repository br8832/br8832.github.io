[{"C:\\Users\\bryan\\portfolio\\src\\index.js":"1","C:\\Users\\bryan\\portfolio\\src\\App.js":"2","C:\\Users\\bryan\\portfolio\\src\\reportWebVitals.js":"3","C:\\Users\\bryan\\portfolio\\src\\components\\Intro.js":"4","C:\\Users\\bryan\\portfolio\\src\\components\\index.js":"5","C:\\Users\\bryan\\portfolio\\src\\components\\Footer.js":"6","C:\\Users\\bryan\\portfolio\\src\\components\\Education.js":"7","C:\\Users\\bryan\\portfolio\\src\\components\\Projects.js":"8","C:\\Users\\bryan\\portfolio\\src\\components\\Work.js":"9","C:\\Users\\bryan\\portfolio\\src\\components\\SlideShow.js":"10","C:\\Users\\bryan\\portfolio\\src\\pages\\TypingTest.js":"11","C:\\Users\\bryan\\portfolio\\src\\pages\\Home.js":"12","C:\\Users\\bryan\\portfolio\\src\\pages\\index.js":"13","C:\\Users\\bryan\\portfolio\\src\\pages\\BigE\\script.js":"14"},{"size":556,"mtime":1651700424171,"results":"15","hashOfConfig":"16"},{"size":350,"mtime":1651697755512,"results":"17","hashOfConfig":"16"},{"size":375,"mtime":1651095562364,"results":"18","hashOfConfig":"16"},{"size":2772,"mtime":1651700707073,"results":"19","hashOfConfig":"16"},{"size":210,"mtime":1651103176542,"results":"20","hashOfConfig":"16"},{"size":995,"mtime":1651095562326,"results":"21","hashOfConfig":"16"},{"size":1412,"mtime":1651095562325,"results":"22","hashOfConfig":"16"},{"size":1944,"mtime":1651101998244,"results":"23","hashOfConfig":"16"},{"size":1880,"mtime":1651095562328,"results":"24","hashOfConfig":"16"},{"size":1024,"mtime":1651695461806,"results":"25","hashOfConfig":"16"},{"size":301,"mtime":1651703846239,"results":"26","hashOfConfig":"16"},{"size":331,"mtime":1651695370750,"results":"27","hashOfConfig":"16"},{"size":93,"mtime":1651694094153,"results":"28","hashOfConfig":"16"},{"size":10675,"mtime":1651699314982,"results":"29","hashOfConfig":"16"},{"filePath":"30","messages":"31","suppressedMessages":"32","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"1ewxcl0",{"filePath":"33","messages":"34","suppressedMessages":"35","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"36","messages":"37","suppressedMessages":"38","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"39"},{"filePath":"40","messages":"41","suppressedMessages":"42","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"43","messages":"44","suppressedMessages":"45","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"46","messages":"47","suppressedMessages":"48","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"49","messages":"50","suppressedMessages":"51","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"52","messages":"53","suppressedMessages":"54","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"55","messages":"56","suppressedMessages":"57","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"58","messages":"59","suppressedMessages":"60","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"61","messages":"62","suppressedMessages":"63","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"64","messages":"65","suppressedMessages":"66","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"67","messages":"68","suppressedMessages":"69","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"70","messages":"71","suppressedMessages":"72","errorCount":0,"fatalErrorCount":0,"warningCount":18,"fixableErrorCount":0,"fixableWarningCount":0,"source":"73"},"C:\\Users\\bryan\\portfolio\\src\\index.js",[],[],"C:\\Users\\bryan\\portfolio\\src\\App.js",[],[],"C:\\Users\\bryan\\portfolio\\src\\reportWebVitals.js",[],[],[],"C:\\Users\\bryan\\portfolio\\src\\components\\Intro.js",[],[],"C:\\Users\\bryan\\portfolio\\src\\components\\index.js",[],[],"C:\\Users\\bryan\\portfolio\\src\\components\\Footer.js",[],[],"C:\\Users\\bryan\\portfolio\\src\\components\\Education.js",[],[],"C:\\Users\\bryan\\portfolio\\src\\components\\Projects.js",[],[],"C:\\Users\\bryan\\portfolio\\src\\components\\Work.js",[],[],"C:\\Users\\bryan\\portfolio\\src\\components\\SlideShow.js",[],[],"C:\\Users\\bryan\\portfolio\\src\\pages\\TypingTest.js",[],[],"C:\\Users\\bryan\\portfolio\\src\\pages\\Home.js",[],[],"C:\\Users\\bryan\\portfolio\\src\\pages\\index.js",[],[],"C:\\Users\\bryan\\portfolio\\src\\pages\\BigE\\script.js",["74","75","76","77","78","79","80","81","82","83","84","85","86","87","88","89","90","91"],[],"//add Bee movie, Shrek Script,\r\nvar text = {\r\n  0: \"A simple test\",\r\n  1: \"I scream, you scream, we all scream for ice cream\",\r\n  2: \"According to all known laws of aviation, there is no way a bee should be able to fly. Its wings are too small to get its fat little body off the ground. The bee, of course, flies anyway because bees don't care what humans think is impossible. Yellow, black. Yellow, black. Yellow, black. Yellow, black. Ooh, black and yellow! Let's shake it up a little.\",\r\n  3: \"Once upon a time there was a lovely princess. But she had an enchantment upon her of a fearful sort which could only be broken by love's first kiss. She was locked away in a castle guarded by a terrible fire-breathing dragon. Many brave knights had attempted to free her from this dreadful prison, but non prevailed. She waited in the dragon's keep in the highest room of the tallest tower for her true love and true love's first kiss. (laughs) Like that's ever gonna happen. What a load of - (toilet flush)\",\r\n}\r\nvar testErors = {\r\n  0: -1,\r\n  1: -1,\r\n  2: -1,\r\n  3: -1,\r\n}\r\nvar top3 = {\r\n  0: \"\",\r\n  1: \"\",\r\n  2: \"\",\r\n}\r\nvar testScores = {};\r\n\r\nlet textlength = Object.keys(text).length;\r\nvar testWrapper = document.querySelector(\".test-wrapper\");\r\nvar testArea = document.querySelector(\"#test-area\");\r\nvar originText = document.querySelector(\"#origin-text p\");\r\nvar resetButton = document.querySelector(\"#reset\");\r\nvar theTimer = document.querySelector(\".timer\");\r\nvar nextTest = document.querySelector(\"#next\");\r\nvar scoreboard = document.querySelectorAll(\".toggle\");\r\nvar progressBar = document.querySelector(\"#progress\");\r\nvar wpmHTML = document.querySelector(\"#wpm\");\r\nvar errorHTML = document.querySelector(\"#error\");\r\nvar start; \r\nvar errors = 0;\r\nvar stopSetInterval;\r\nvar WPMInterval;\r\nvar index = 0;\r\nvar scoreIndex = 0;\r\nvar currentIndex = 0;\r\nvar wentBack = false;\r\n\r\nvar clearedByFinish = false;\r\n(function() {\r\n  originText.innerHTML = text[index];\r\n}())\r\n\r\n\r\n// Run a standard minute/second/hundredths timer:\r\n// Add leading zero to numbers 9 or below (purely for aesthetics):\r\nfunction timer() \r\n{ \r\n  var now = new Date().getTime(); \r\n  var t = now - start.getTime();\r\n  //a lot of math, but it's just unit conversion. This site helped https://www.developerdrive.com/build-countdown-timer-pure-javascript/#:~:text=How%20to%20Build%20a%20Countdown%20Timer%20in%20Pure,the%20countdown%20timer%20any%20way%20you%20want.%20 using date.getTime() we have time in milliseconds. Then t % (unit) is the number of units in the time for example 0 seconds and 1 minute have the same number of seconds (0) so 0 % 60  === 60 % 60. t / unit returns how many units are in t. 100 seconds/ 1 minute would return number of minutes in 100 seconds Using floor, we extract the whole number of unit in T. Putting it together, take number units in time, then extract the number of the next unit. of course we need to convert things to milliseconds. So to get mins, find the number of hours and divide by minutes to get the number of minutes\r\n  var mins = Math.floor((t % (1000 * 60 * 60)) / (1000 * 60));\r\n  // To get seconds, find the number of minutes and divide by seconds to get the number of seconds\r\n  var secs = Math.floor((t % (1000 * 60)) / 1000);\r\n  // due to that I could find the hundreths get the number of milliseconds in seconds and divide by 10 to get the centiseconds(hundreths)\r\n  var hundreths =  Math.floor((t % 1000)/10);\r\n  theTimer.innerHTML = (\"0\"+mins).slice(\"-2\")+\":\"+(\"0\"+secs).slice(\"-2\")+\":\"+(\"0\"+hundreths).slice(\"-2\")\r\n}\r\nfunction Timer(event)\r\n{\r\n  if(event.inputType == \"insertText\") \r\n  {\r\n    start = new Date();\r\n    stopSetInterval = setInterval(timer,10);\r\n    testArea.removeEventListener(\"input\",Timer);\r\n  }\r\n  \r\n}\r\nfunction WPM(event)\r\n{\r\n  if(event.inputType == \"insertText\"){\r\n    WPMInterval = setInterval(wpm, 1010);\r\n    testArea.removeEventListener(\"input\", WPM);\r\n  }\r\n}\r\n// for now disregard errors\r\nfunction wpm()\r\n{    \r\n    let time = theTimer.innerHTML.split(\":\");\r\n    let total_seconds = parseInt(time[0] * 60, 10) + parseInt(time[1], 10) + parseFloat(time[2] / 100);\r\n    // one way to calculate WPM\r\n    let wpm = Math.floor(testArea.value.length / 5 / (total_seconds / 60));\r\n    wpmHTML.innerHTML =\"WPM: \" + wpm + \" (words per min)\";\r\n  \r\n}\r\n// Match the text entered with the provided text on the page:\r\nfunction textCheck(event){  \r\n  if(event.inputType == \"insertText\" || event.inputType == \"deleteContentBackward\")\r\n  { \r\n      let currentUserText = testArea.value;\r\n      let currentTest = text[index];\r\n      let userLength = currentUserText.length;\r\n      let textLength = currentTest.length;\r\n      let percentage = userLength/textLength;\r\n      progressBar.value = (percentage > 1) ? 1 : percentage;\r\n    // not done  \r\n    if(currentTest !== currentUserText)\r\n        {\r\n          \r\n           // check this keys\r\n           if (event.inputType == \"insertText\")\r\n             {\r\n               // check the currentIndex to see if it is correct\r\n               let currentLetterCorrect = currentTest[currentIndex] !== currentUserText[currentIndex];\r\n               errors = currentLetterCorrect ? errors + 1 : errors;\r\n               errorHTML.innerHTML = \"Errors: \" + errors;\r\n               testWrapper.style.borderColor = currentLetterCorrect ? \"red\" : \"green\"; \r\n               currentIndex++;\r\n               \r\n             }\r\n            // going back to fix a mistake\r\n          else if (event.inputType == \"deleteContentBackward\")\r\n            {\r\n              currentIndex--;\r\n              //wentBack = true;\r\n            }\r\n         \r\n         }\r\n      else\r\n        {\r\n          //the user is done and so do clean up\r\n          currentIndex = 0;\r\n          clearInterval(WPMInterval);\r\n          clearInterval(stopSetInterval);\r\n          storeTime(theTimer.innerHTML);\r\n          updateScores();\r\n          errorHTML.innerHTML = (errors == 0) ? \"Nice job. No errors!!!!\" : \"Errors: \" + errors;\r\n          errorHTML.style.color = (errors==0) ? \"green\" : \"red\"; \r\n          testWrapper.style.borderColor = \"blue\";\r\n          testArea.disabled=\"disabled\";\r\n          testArea.addEventListener(\"input\",Timer);\r\n          testArea.addEventListener(\"input\", WPM);\r\n          clearedByFinish = true;\r\n          nextTest.style.display = \"inherit\";\r\n        }\r\n    }\r\n  if(event.inputType == \"insertFromPaste\")\r\n    {\r\n      testArea.value = \"\";\r\n      alert(\"NO!!!!!!!\");\r\n    }\r\n}\r\n\r\nfunction updateScores()\r\n{\r\n  document.querySelector(\"#scores\").style.display = \"inherit\";\r\n  if (top3[1] == \"\")\r\n    {\r\n      \r\n      scoreboard[0].style.display = \"inherit\";    \r\n      scoreboard[0].innerHTML = '<td>1st</td><td>'+top3[0]+'</td>';\r\n      \r\n    }\r\n  else if (top3[2] == \"\")\r\n    {\r\n      scoreboard[0].style.display = \"inherit\"; \r\n      scoreboard[1].style.display = \"inherit\";    \r\n      scoreboard[1].innerHTML = '<td>2nd</td><td>'+top3[1]+'</td>';\r\n      scoreboard[0].innerHTML = '<td>1st</td><td>'+top3[0]+'</td>';\r\n      \r\n    }\r\n  else {\r\n      scoreboard[0].style.display = \"inherit\"; \r\n      scoreboard[1].style.display = \"inherit\"; \r\n      scoreboard[2].style.display = \"inherit\";\r\n      scoreboard[2].innerHTML = '<td>3rd</td><td>'+top3[2]+'</td>';\r\n      scoreboard[1].innerHTML = '<td>2nd</td><td>'+top3[1]+'</td>';\r\n      scoreboard[0].innerHTML = '<td>1st</td><td>'+top3[0]+'</td>';\r\n    \r\n  }\r\n}\r\nfunction storeTime(time)\r\n// stores the time and also keeps the ranking correct, with top3[0] being the fastest time\r\n// very spaghetti-like, but it gets the job done\r\n{\r\n  //no scores exists\r\n  if (top3[0] == \"\")\r\n    {\r\n      top3[0] = time;\r\n    }\r\n  //1 exists\r\n  else if (top3[1] == \"\")\r\n    {\r\n      if (fasterTime(top3[0],time))\r\n        {\r\n          top3[1] = top3[0];\r\n          top3[0] = time;\r\n        }\r\n      else\r\n        {\r\n          top3[1] = time;\r\n        }\r\n    }\r\n  //2 exist\r\n  else if (top3[2] == \"\")\r\n    {\r\n      if(fasterTime(top3[0],time))\r\n        {\r\n          top3[2] = top3[1];\r\n          top3[1] = top3[0];\r\n          top3[0] = time;\r\n        }\r\n        else if (fasterTime(top3[1],time))\r\n          {\r\n            top3[2] = top3[1];\r\n            top3[1] = time;\r\n          }\r\n        else {\r\n          top3[2] = time;\r\n        }\r\n    }\r\n  //all scores exist\r\n  else {\r\n    if(fasterTime(top3[0],time))\r\n        {\r\n          top3[2] = top3[1];\r\n          top3[1] = top3[0];\r\n          top3[0] = time;\r\n        }\r\n        else if (fasterTime(top3[1],time))\r\n          {\r\n            top3[2] = top3[1];\r\n            top3[1] = time;\r\n          }\r\n        else if (fasterTime(top3[2],time)) \r\n        {\r\n          top3[2] = time;\r\n        }\r\n  }\r\n}\r\nfunction fasterTime(storedTime, newTime){\r\n  //way to compare two times of our timer\r\n  let storedT = storedTime.split(\":\");\r\n  let newT = newTime.split(\":\");\r\n  return (parseInt(newT[0] * 60, 10) + parseInt(newT[1], 10) + parseFloat(newT[2] / 100)) < (parseInt(storedT[0] * 60, 10) + parseInt(storedT[1], 10) + parseFloat(storedT[2] / 100)) \r\n\r\n  \r\n}\r\n// Start the timer:\r\ntestArea.addEventListener(\"input\",Timer);\r\ntestArea.addEventListener(\"input\", WPM);\r\n// Reset everything:\r\nfunction reset(event){\r\n  //console.log(event)\r\n   // alert is chosen so the user has time to compose;\r\n  alert(\"Resetting things\");\r\n  if(!clearedByFinish)\r\n    {\r\n      clearInterval(stopSetInterval);\r\n      clearInterval(WPMInterval);\r\n      testArea.addEventListener(\"input\",Timer);\r\n      testArea.addEventListener(\"input\", WPM);\r\n      clearedByFinish = false;\r\n    }\r\n \r\n  theTimer.innerHTML = \"00:00:00\";\r\n  wpmHTML.innerHTML = \"WPM: \";\r\n  errorHTML.innerHTML = \"Errors: \";\r\n  errorHTML.style.color = \"red\";\r\n  progressBar.value = 0;\r\n  testArea.value = \"\";\r\n  testWrapper.style.borderColor=\"grey\";\r\n  errors = 0;\r\n  //originText.innerHTML = text[index++ % textlength];\r\n  if(testArea.hasAttribute(\"disabled\"))\r\n    {\r\n      testArea.removeAttribute(\"disabled\");\r\n    }\r\n}\r\nfunction newTest(event)\r\n{\r\n  \r\n  if(!testScores[index])\r\n  {\r\n    document.querySelector(\"#scores\").style.display = \"none\";\r\n    testScores[index] = {};\r\n    for (var key in top3)\r\n      {\r\n        testScores[index][key] = top3[key]; \r\n        top3[key] = \"\";\r\n        scoreboard[key].style.display = \"none\"; \r\n      }\r\n  }\r\n  index = (index + 1) % textlength\r\n  originText.innerHTML = text[index];\r\n  if(testScores[index]) {\r\n    for (var key in top3)\r\n    {\r\n      top3[key] = testScores[index][key];\r\n      updateScores();\r\n    }\r\n  }\r\n  reset();\r\n}\r\n// Event listeners for keyboard input and the reset button:\r\nresetButton.addEventListener(\"click\", reset);\r\ntestArea.addEventListener(\"input\", textCheck);\r\nnextTest.addEventListener(\"click\", newTest);",{"ruleId":"92","severity":1,"message":"93","line":8,"column":5,"nodeType":"94","messageId":"95","endLine":8,"endColumn":14},{"ruleId":"92","severity":1,"message":"96","line":37,"column":5,"nodeType":"94","messageId":"95","endLine":37,"endColumn":15},{"ruleId":"92","severity":1,"message":"97","line":39,"column":5,"nodeType":"94","messageId":"95","endLine":39,"endColumn":13},{"ruleId":"98","severity":1,"message":"99","line":63,"column":22,"nodeType":"100","messageId":"101","endLine":63,"endColumn":24},{"ruleId":"98","severity":1,"message":"99","line":73,"column":22,"nodeType":"100","messageId":"101","endLine":73,"endColumn":24},{"ruleId":"98","severity":1,"message":"99","line":90,"column":22,"nodeType":"100","messageId":"101","endLine":90,"endColumn":24},{"ruleId":"98","severity":1,"message":"99","line":90,"column":57,"nodeType":"100","messageId":"101","endLine":90,"endColumn":59},{"ruleId":"98","severity":1,"message":"99","line":103,"column":32,"nodeType":"100","messageId":"101","endLine":103,"endColumn":34},{"ruleId":"98","severity":1,"message":"99","line":114,"column":36,"nodeType":"100","messageId":"101","endLine":114,"endColumn":38},{"ruleId":"98","severity":1,"message":"99","line":129,"column":41,"nodeType":"100","messageId":"101","endLine":129,"endColumn":43},{"ruleId":"98","severity":1,"message":"99","line":130,"column":42,"nodeType":"100","messageId":"101","endLine":130,"endColumn":44},{"ruleId":"98","severity":1,"message":"99","line":139,"column":22,"nodeType":"100","messageId":"101","endLine":139,"endColumn":24},{"ruleId":"98","severity":1,"message":"99","line":149,"column":15,"nodeType":"100","messageId":"101","endLine":149,"endColumn":17},{"ruleId":"98","severity":1,"message":"99","line":156,"column":20,"nodeType":"100","messageId":"101","endLine":156,"endColumn":22},{"ruleId":"98","severity":1,"message":"99","line":179,"column":15,"nodeType":"100","messageId":"101","endLine":179,"endColumn":17},{"ruleId":"98","severity":1,"message":"99","line":184,"column":20,"nodeType":"100","messageId":"101","endLine":184,"endColumn":22},{"ruleId":"98","severity":1,"message":"99","line":197,"column":20,"nodeType":"100","messageId":"101","endLine":197,"endColumn":22},{"ruleId":"102","severity":1,"message":"103","line":289,"column":14,"nodeType":"94","messageId":"104","endLine":289,"endColumn":17},"no-unused-vars","'testErors' is assigned a value but never used.","Identifier","unusedVar","'scoreIndex' is assigned a value but never used.","'wentBack' is assigned a value but never used.","eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","no-redeclare","'key' is already defined.","redeclared"]